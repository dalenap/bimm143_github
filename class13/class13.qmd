---
title: "Class 13: RNASeq Analysis"
author: "Dalena (PID: A17327787)"
format: pdf
toc: TRUE
---

# Background
Today we will analyze some RNA Sequencing data on the effects of a common steroid drug on airway cell lines.

There are two main inputs we need for this analysis:

- `countData`: counts for genes in rows with experiments in columns
- `colData`: or metadata that tells us about the design of the experiment (i.e. what is in the columns of `countData`)

# Import countData and colData

```{r}
counts <-read.csv("airway_scaledcounts.csv",row.names=1)
metadata <- read.csv("airway_metadata.csv")
```

>Q1. How many genes are in this dataset?

```{r}
nrow(counts)
```

>Q2. How many 'control' cell lines do we have?

```{r}
table(metadata$dex)

sum(metadata$dex=="control")
```

# Toy differential gene expression

Let's try finding the average or mean of the "control" and "treated columns and see if they differ.

1. First we need to find all "control" columns
2. Extract just the "control" values for each gene
3. Calculate the `mean()` for each gene "control" values

```{r}
all(colnames(counts) ==metadata$id)
```

The $dex column tells me whether we have "control" or "treated"

```{r}
metadata$dex
```

```{r}
control.inds <-metadata$dex=="control"
```

Extract just the "control" values for all genes

```{r}
control.counts<-counts[,control.inds]
```

Calculate the mean value for each gene in these "control" columns

```{r}
control.mean <-rowMeans(control.counts)
```

>Q3. Do the same for "treated" to get a `treated.mean`

```{r}
treated.inds <-metadata$dex=="treated"
treated.counts <- counts[,treated.inds]
treated.mean <- rowMeans(treated.counts)
```

Let's store our mean values together in a dataframe for easier book-keeping

```{r}
meancounts<-data.frame(control.mean,treated.mean)
head(meancounts)
```

>Q4. Make a plot of `control.mean` vs `treated.mean`

```{r}
library(ggplot2)
```

```{r}
ggplot(meancounts)+
  aes(control.mean,treated.mean)+
  geom_point(alpha=0.5,col="dodgerblue4")+ labs(title="Control vs Treated Means",x="Control Means",y="Treated Means")+
  scale_x_log10()+
  scale_y_log10()
```

We totally need to log transform this data as it is so heavily skewed!

```{r}
plot(meancounts,log="xy")
```

```{r}
# TREATED/CONTROL
log2(20/20)

#Doubling the amount
log2(40/20)

# Half the amount
log2(10/20)
```

A common rule-of-thumb is to focus on genes with a log2 "fold-change" of a +2 as so-called "UP REGULATED" and -2 as DOWN REGULATED"

```{r}
log2(80/20)
```

Let's add a log2 fold-change to our `meancounts` dataframe

```{r}
meancounts$log2fc<-log2(meancounts$treated.mean/meancounts$control.mean)

head(meancounts)
```

>Q5. Remove any "zero-count" genes from our dataset for further analysis.

```{r}
to.keep <- rowSums(meancounts[,1:2]==0) ==0

sum(to.keep)
```

```{r}
mycounts <- meancounts[to.keep,]
head(mycounts)
```

>Q6. How many genes are "up" regulated at a log2fc threshold of +2?

```{r}
up.ind<-sum(mycounts$log2fc >= 2)
up.ind
```

>Q7. How many genes are "down" regulated at a log2fc threshold of -2?

```{r}
down.ind <-sum(mycounts$log2fc <= -2)
down.ind
```

# DESeq2 analysis

Let's do this properly and consider the stats -- are the differences in the means significant?

We will use DESeq2 to do this

```{r,message=FALSE}
library(DESeq2)
```

The first function we will use from this package sets up the input in the particular format that DESeq wants:

```{r}
dds<- DESeqDataSetFromMatrix(countData=counts,
                             colData=metadata,
                             design= ~dex)
```

We can now run our DESeq analysis

```{r}
dds<-DESeq(dds)
res <- results(dds)
```

Peak at results

```{r}
head(res)
```

# Result figure: Volcano Plots

Plot of the P=value vs the Log2FC

```{r}
plot(res$log2FoldChange,res$padj)
```

This P-value data is again heavily skewed so lets log transform it.

```{r}
plot(res$log2FoldChange,log(res$padj))
```

We can flip the y-axis by adding a minus sign. This will make it easier to interpret

```{r}
plot(res$log2FoldChange,-log(res$padj),
     xlab="Log2(FoldChange)",
      ylab="-Log(P-value)")
abline(v=-2,col="orchid",lty=2,lwd=2)
abline(v=2, col="orchid",lty=2,lwd=2)
abline(h=-log(0.05),col="orchid",lty=2,lwd=2)
```

Let's add some color.

```{r}
# colors points on plot based on value
mycols <-rep("gray",nrow(res))
mycols[res$log2FoldChange <= -2] <-"dodgerblue3"
mycols[res$log2FoldChange>=2] <- "dodgerblue3"
mycols[res$padj >=0.05] <- "gray"

# make the plot
plot(res$log2FoldChange,-log(res$padj),col=mycols)

# adds the guidelines
abline(v=-2,col="orchid",lty=2,lwd=2)
abline(v=2, col="orchid",lty=2,lwd=2)
abline(h=-log(0.05),col="orchid",lty=2,lwd=2)
```

```{r}
head(res)
```

> Q8. Make a ggplot volcano plot with colors and lines as annotation along with nice axis labels.


```{r}
ggplot(as.data.frame(res))+
  aes(log2FoldChange,-log(padj))+
  geom_point(col=mycols)+
  geom_vline(xintercept=2,
             col="red",
             linetype="dotted",
             size=0.8)+
  geom_vline(xintercept=-2,
             col="red",
             linetype="dotted",
             size=0.8)+
  geom_hline(yintercept=-log(0.05),
             col="red",
             linetype="dotted",
             size=0.8)+
  theme_bw()+
  labs(title="Log2FC vs P-value", 
       x= "Log2(Fold Change)", 
       y="p-Value")

```

# We need to add gene annotation

We first need to add gene symbols (e.g. HBB) so we know what genes we are dealing with. We need to "translate" between ENSEMBL ids that we have in the rownames of `res`. 

```{r}
head(rownames(res))
```

Install from bioconductor `BiocManager::install("AnnotationDbi")` and `BiocManager::install("org.Hs.eg.db")`

```{r}
library(AnnotationDbi)
library(org.Hs.eg.db)
```

What different database ID types can I translate between.

```{r}
columns(org.Hs.eg.db)
```

Lets "map" between "ENSEMBL" and "SYMBOL" (i.e. gene symbol).

```{r}
res$symbol<- mapIds(x=org.Hs.eg.db,
             keys=rownames(res),
             keytype="ENSEMBL",
             column="SYMBOL")

head(res)
```

Add a few more ID mappings including "GENENAME" and "ENTREZID".

```{r}
res$name<- mapIds(x=org.Hs.eg.db,
             keys=rownames(res),
             keytype="ENSEMBL",
             column="GENENAME")

res$entrez<- mapIds(x=org.Hs.eg.db,
             keys=rownames(res),
             keytype="ENSEMBL",
             column="ENTREZID")

head(res)
```

Be sure to save our annotated results to a file.

```{r}
write.csv(res, file="my_annotated_results.csv")
```

# Pathway Analysis

Install the packages we need for pathway analysis: Run in your R console (i.e. not your Quarto doc!)
`BiocManager::install(c("pathview","gage","gageData"))`

```{r, message=FALSE}
library(gage)
library(gageData)
library(pathview)
```

Let's peak at the gageData

```{r}
data(kegg.sets.hs)

#Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs,2)
```

To run pathway analysis we will use the `gage()` function and it requires a "vector of importance". We will use our log2FC results from our `res` object.'

```{r}
foldchanges=res$log2FoldChange
names(foldchanges)=res$entrez
head(foldchanges)
```

```{r}
keggres=gage(foldchanges,gsets=kegg.sets.hs)
```

What is in the returned `keggres` object

```{r}
attributes(keggres)
```

```{r}
head(keggres$less)
```

We can pass our foldchanges vector (our results) together with any of these highligted pathway IDs to see how our genes overlap the pathway.

```{r}
pathview(gene.data=foldchanges,pathway.id="hsa05310")
```

![The Asthma pathway overlaps with our differentially expressed genes](hsa05310.pathview.png)

